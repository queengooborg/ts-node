{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../src/test/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, ExecutionContext } from './testlib';\nimport * as expect from 'expect';\nimport { join, resolve, sep as pathSep } from 'path';\nimport { tmpdir } from 'os';\nimport semver = require('semver');\nimport {\n  BIN_PATH_JS,\n  CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n  nodeSupportsEsmHooks,\n  nodeSupportsSpawningChildProcess,\n  ts,\n  tsSupportsMtsCtsExtensions,\n  tsSupportsShowConfig,\n  tsSupportsStableNodeNextNode16,\n  tsSupportsTsconfigInheritanceViaNodePackages,\n} from './helpers';\nimport { lstatSync, mkdtempSync } from 'fs';\nimport { npath } from '@yarnpkg/fslib';\nimport type _createRequire from 'create-require';\nimport { createExec } from './exec-helpers';\nimport {\n  BIN_CWD_PATH,\n  BIN_PATH,\n  BIN_SCRIPT_PATH,\n  DIST_DIR,\n  ROOT_DIR,\n  TEST_DIR,\n  testsDirRequire,\n  tsNodeTypes,\n  xfs,\n  ctxTsNode,\n  CMD_TS_NODE_WITH_PROJECT_FLAG,\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  CMD_ESM_LOADER_WITHOUT_PROJECT,\n} from './helpers';\nimport type { CreateOptions } from '..';\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst test = context(ctxTsNode);\n\ntest.suite('ts-node', (test) => {\n  test('should export the correct version', (t) => {\n    expect(t.context.tsNodeUnderTest.VERSION).toBe(\n      require('../../package.json').version\n    );\n  });\n  test('should export all CJS entrypoints', () => {\n    // Ensure our package.json \"exports\" declaration allows `require()`ing all our entrypoints\n    // https://github.com/TypeStrong/ts-node/pull/1026\n\n    testsDirRequire.resolve('ts-node');\n\n    // only reliably way to ask node for the root path of a dependency is Path.resolve(require.resolve('ts-node/package'), '..')\n    testsDirRequire.resolve('ts-node/package');\n    testsDirRequire.resolve('ts-node/package.json');\n\n    // All bin entrypoints for people who need to augment our CLI: `node -r otherstuff ./node_modules/ts-node/dist/bin`\n    testsDirRequire.resolve('ts-node/dist/bin');\n    testsDirRequire.resolve('ts-node/dist/bin.js');\n    testsDirRequire.resolve('ts-node/dist/bin-transpile');\n    testsDirRequire.resolve('ts-node/dist/bin-transpile.js');\n    testsDirRequire.resolve('ts-node/dist/bin-script');\n    testsDirRequire.resolve('ts-node/dist/bin-script.js');\n    testsDirRequire.resolve('ts-node/dist/bin-cwd');\n    testsDirRequire.resolve('ts-node/dist/bin-cwd.js');\n\n    // Must be `require()`able obviously\n    testsDirRequire.resolve('ts-node/register');\n    testsDirRequire.resolve('ts-node/register/files');\n    testsDirRequire.resolve('ts-node/register/transpile-only');\n    testsDirRequire.resolve('ts-node/register/type-check');\n\n    if (semver.gte(process.version, '12.17.0')) {\n      // `node --loader ts-node/esm`\n      testsDirRequire.resolve('ts-node/esm');\n      testsDirRequire.resolve('ts-node/esm.mjs');\n      testsDirRequire.resolve('ts-node/esm/transpile-only');\n      testsDirRequire.resolve('ts-node/esm/transpile-only.mjs');\n    }\n\n    testsDirRequire.resolve('ts-node/transpilers/swc');\n    testsDirRequire.resolve('ts-node/transpilers/swc-experimental');\n\n    testsDirRequire.resolve('ts-node/node10/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node12/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node14/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node16/tsconfig.json');\n  });\n\n  test('should not load typescript outside of loadConfig', async () => {\n    const { err, stdout } = await exec(\n      `node -e \"require('ts-node'); console.dir(Object.keys(require.cache).filter(k => k.includes('node_modules/typescript')).length)\"`\n    );\n    expect(err).toBe(null);\n    expect(stdout).toBe('0\\n');\n  });\n\n  test.suite('cli', (test) => {\n    test('should execute cli', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} hello-world`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, world!\\n');\n    });\n\n    test('shows usage via --help', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --help`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/Usage: ts-node /);\n    });\n    test('shows version via -v', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} -v`\n      );\n      expect(err).toBe(null);\n      expect(stdout.trim()).toBe(\n        'v' + testsDirRequire('ts-node/package').version\n      );\n    });\n    test('shows version of compiler via -vv', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} -vv`\n      );\n      expect(err).toBe(null);\n      expect(stdout.trim()).toBe(\n        `ts-node v${testsDirRequire('ts-node/package').version}\\n` +\n          `node ${process.version}\\n` +\n          `compiler v${testsDirRequire('typescript/package').version}`\n      );\n    });\n\n    test('should register via cli', async () => {\n      const { err, stdout } = await exec(\n        `node -r ts-node/register hello-world.ts`,\n        {\n          cwd: TEST_DIR,\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, world!\\n');\n    });\n\n    test('should execute cli with absolute path', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} \"${join(\n          TEST_DIR,\n          'hello-world'\n        )}\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, world!\\n');\n    });\n\n    test('should print scripts', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} -pe \"import { example } from './complex/index';example()\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('example\\n');\n    });\n\n    test(\"should expose ts-node Service as a symbol property on Node's `process` object\", async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} env`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('object\\n');\n    });\n\n    test('should allow js', async () => {\n      const { err, stdout } = await exec(\n        [\n          CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n          '-O \"{\\\\\"allowJs\\\\\":true}\"',\n          '-pe \"import { main } from \\'./allow-js/run\\';main()\"',\n        ].join(' ')\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('hello world\\n');\n    });\n\n    test('should include jsx when `allow-js` true', async () => {\n      const { err, stdout } = await exec(\n        [\n          CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n          '-O \"{\\\\\"allowJs\\\\\":true}\"',\n          '-pe \"import { Foo2 } from \\'./allow-js/with-jsx\\'; Foo2.sayHi()\"',\n        ].join(' ')\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('hello world\\n');\n    });\n\n    test.suite('should support cts when module = CommonJS', (test) => {\n      test.runIf(tsSupportsMtsCtsExtensions);\n      test('test', async (t) => {\n        const { err, stdout } = await exec(\n          [\n            CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n            '-pe \"import { main } from \\'./index.cjs\\';main()\"',\n          ].join(' '),\n          {\n            cwd: join(TEST_DIR, 'ts45-ext/ext-cts'),\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('hello world\\n');\n      });\n    });\n\n    test.suite('should support mts when module = ESNext', (test) => {\n      test.runIf(\n        nodeSupportsSpawningChildProcess && tsSupportsMtsCtsExtensions\n      );\n      test('test', async () => {\n        const { err, stdout } = await exec(\n          [CMD_TS_NODE_WITHOUT_PROJECT_FLAG, './entrypoint.mjs'].join(' '),\n          {\n            cwd: join(TEST_DIR, 'ts45-ext/ext-mts'),\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('hello world\\n');\n      });\n    });\n\n    test('should eval code', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -e \"import * as m from './module';console.log(m.example('test'))\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('TEST\\n');\n    });\n\n    test('should import empty files', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -e \"import './empty'\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('');\n    });\n\n    test('should throw typechecking errors', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(\n        new RegExp(\n          \"TS2345: Argument of type '(?:number|123)' \" +\n            \"is not assignable to parameter of type 'string'\\\\.\"\n        )\n      );\n    });\n\n    test('should be able to ignore diagnostic', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --ignore-diagnostics 2345 -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(\n        /TypeError: (?:(?:undefined|foo\\.toUpperCase) is not a function|.*has no method \\'toUpperCase\\')/\n      );\n    });\n\n    test('should work with source maps', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} \"throw error\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should work with source maps in --transpile-only mode', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only \"throw error\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('eval should work with source maps', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} -pe \"import './throw error'\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n        ].join('\\n')\n      );\n    });\n\n    test('should support transpile only mode', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"x\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch('ReferenceError: x is not defined');\n    });\n\n    test('should throw error even in transpileOnly mode', async () => {\n      const { err } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"console.\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch('error TS1003: Identifier expected');\n    });\n\n    for (const flavor of [\n      '--transpiler ts-node/transpilers/swc transpile-only-swc',\n      '--transpiler ts-node/transpilers/swc-experimental transpile-only-swc',\n      '--swc transpile-only-swc',\n      'transpile-only-swc-via-tsconfig',\n      'transpile-only-swc-shorthand-via-tsconfig',\n    ]) {\n      test(`should support swc and third-party transpilers: ${flavor}`, async () => {\n        const { err, stdout } = await exec(\n          `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} ${flavor}`,\n          {\n            env: {\n              ...process.env,\n              NODE_OPTIONS: `${\n                process.env.NODE_OPTIONS || ''\n              } --require ${require.resolve('../../tests/spy-swc-transpiler')}`,\n            },\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toMatch(\n          'Hello World! swc transpiler invocation count: 1\\n'\n        );\n      });\n    }\n\n    test.suite('should support `traceResolution` compiler option', (test) => {\n      test('prints traces before running code when enabled', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_PATH} --compiler-options=\"{ \\\\\"traceResolution\\\\\": true }\" -e \"console.log('ok')\"`\n        );\n        expect(err).toBeNull();\n        expect(stdout).toContain('======== Resolving module');\n        expect(stdout.endsWith('ok\\n')).toBe(true);\n      });\n\n      test('does NOT print traces when not enabled', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_PATH} -e \"console.log('ok')\"`\n        );\n        expect(err).toBeNull();\n        expect(stdout).not.toContain('======== Resolving module');\n        expect(stdout.endsWith('ok\\n')).toBe(true);\n      });\n    });\n\n    if (nodeSupportsEsmHooks) {\n      test('swc transpiler supports native ESM emit', async () => {\n        const { err, stdout } = await exec(\n          `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./index.ts`,\n          {\n            cwd: resolve(TEST_DIR, 'transpile-only-swc-native-esm'),\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toMatch('Hello file://');\n      });\n    }\n\n    test('should pipe into `ts-node` and evaluate', async () => {\n      const execPromise = exec(CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG);\n      execPromise.child.stdin!.end(\"console.log('hello')\");\n      const { err, stdout } = await execPromise;\n      expect(err).toBe(null);\n      expect(stdout).toBe('hello\\n');\n    });\n\n    test('should pipe into `ts-node`', async () => {\n      const execPromise = exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -p`\n      );\n      execPromise.child.stdin!.end('true');\n      const { err, stdout } = await execPromise;\n      expect(err).toBe(null);\n      expect(stdout).toBe('true\\n');\n    });\n\n    test('should pipe into an eval script', async () => {\n      const execPromise = exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"process.stdin.isTTY\"`\n      );\n      execPromise.child.stdin!.end('true');\n      const { err, stdout } = await execPromise;\n      expect(err).toBe(null);\n      expect(stdout).toBe('undefined\\n');\n    });\n\n    test('should support require flags', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -r ./hello-world -pe \"console.log('success')\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, world!\\nsuccess\\nundefined\\n');\n    });\n\n    test('should support require from node modules', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -r typescript -e \"console.log('success')\"`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('success\\n');\n    });\n\n    test('should use source maps with react tsx', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} \"throw error react tsx.tsx\"`\n      );\n      expect(err).not.toBe(null);\n      expect(err!.message).toMatch(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should use source maps with react tsx in --transpile-only mode', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only \"throw error react tsx.tsx\"`\n      );\n      expect(err).not.toBe(null);\n      expect(err!.message).toMatch(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should allow custom typings', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} custom-types`\n      );\n      // This error comes from *node*, meaning TypeScript respected the custom types (good) but *node* could not find the non-existent module (expected)\n      expect(err?.message).toMatch(\n        /Error: Cannot find module 'does-not-exist'/\n      );\n    });\n\n    test('should import js before ts by default', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/compiled`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, JavaScript!\\n');\n    });\n\n    test('should import ts before js when --prefer-ts-exts flag is present', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} --prefer-ts-exts import-order/compiled`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, TypeScript!\\n');\n    });\n\n    test('should import ts before js when TS_NODE_PREFER_TS_EXTS env is present', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/compiled`,\n        {\n          env: { ...process.env, TS_NODE_PREFER_TS_EXTS: 'true' },\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, TypeScript!\\n');\n    });\n\n    test('should ignore .d.ts files', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/importer`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('Hello, World!\\n');\n    });\n\n    test.suite('issue #884', (test) => {\n      // TODO disabled because it consistently fails on Windows on TS 2.7\n      test.skipIf(\n        process.platform === 'win32' && semver.satisfies(ts.version, '2.7')\n      );\n      test('should compile', async (t) => {\n        const { err, stdout } = await exec(\n          `\"${BIN_PATH}\" --project issue-884/tsconfig.json issue-884`\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('');\n      });\n    });\n\n    test.suite('issue #986', (test) => {\n      test('should not compile', async () => {\n        const { err, stdout, stderr } = await exec(\n          `\"${BIN_PATH}\" --project issue-986/tsconfig.json issue-986`\n        );\n        expect(err).not.toBe(null);\n        expect(stderr).toMatch(\"Cannot find name 'TEST'\"); // TypeScript error.\n        expect(stdout).toBe('');\n      });\n\n      test('should compile with `--files`', async () => {\n        const { err, stdout, stderr } = await exec(\n          `\"${BIN_PATH}\" --files --project issue-986/tsconfig.json issue-986`\n        );\n        expect(err).not.toBe(null);\n        expect(stderr).toMatch('ReferenceError: TEST is not defined'); // Runtime error.\n        expect(stdout).toBe('');\n      });\n    });\n\n    test('should locate tsconfig relative to entry-point by default', async () => {\n      const { err, stdout } = await exec(`${BIN_PATH} ../a/index`, {\n        cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n      });\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/plugin-a/);\n    });\n    test('should locate tsconfig relative to entry-point via ts-node-script', async () => {\n      const { err, stdout } = await exec(`${BIN_SCRIPT_PATH} ../a/index`, {\n        cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n      });\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/plugin-a/);\n    });\n    test('should locate tsconfig relative to entry-point with --script-mode', async () => {\n      const { err, stdout } = await exec(\n        `${BIN_PATH} --script-mode ../a/index`,\n        {\n          cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/plugin-a/);\n    });\n    test('should locate tsconfig relative to cwd via ts-node-cwd', async () => {\n      const { err, stdout } = await exec(`${BIN_CWD_PATH} ../a/index`, {\n        cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n      });\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/plugin-b/);\n    });\n    test('should locate tsconfig relative to cwd in --cwd-mode', async () => {\n      const { err, stdout } = await exec(`${BIN_PATH} --cwd-mode ../a/index`, {\n        cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n      });\n      expect(err).toBe(null);\n      expect(stdout).toMatch(/plugin-b/);\n    });\n    test('should locate tsconfig relative to realpath, not symlink, when entrypoint is a symlink', async (t) => {\n      if (\n        lstatSync(\n          join(TEST_DIR, 'main-realpath/symlink/symlink.tsx')\n        ).isSymbolicLink()\n      ) {\n        const { err, stdout } = await exec(\n          `${BIN_PATH} main-realpath/symlink/symlink.tsx`\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('');\n      } else {\n        t.log('Skipping');\n        return;\n      }\n    });\n\n    test.suite('should read ts-node options from tsconfig.json', (test) => {\n      const BIN_EXEC = `\"${BIN_PATH}\" --project tsconfig-options/tsconfig.json`;\n\n      test('should override compiler options from env', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_COMPILER_OPTIONS: '{\"typeRoots\": [\"env-typeroots\"]}',\n            },\n          }\n        );\n        expect(err).toBe(null);\n        const { config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).toEqual([\n          join(TEST_DIR, './tsconfig-options/env-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n      });\n\n      test('should use options from `tsconfig.json`', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`\n        );\n        expect(err).toBe(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).toEqual([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).toEqual(['tsconfig-tsnode-types']);\n        expect(options.pretty).toBe(undefined);\n        expect(options.skipIgnore).toBe(false);\n        expect(options.transpileOnly).toBe(true);\n        expect(options.require).toEqual([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n        ]);\n      });\n\n      test('should ignore empty strings in the array options', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_IGNORE: '',\n            },\n          }\n        );\n        expect(err).toBe(null);\n        const { options } = JSON.parse(stdout);\n        expect(options.ignore).toEqual([]);\n      });\n\n      test('should have flags override / merge with `tsconfig.json`', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} --skip-ignore --compiler-options \"{\\\\\"types\\\\\":[\\\\\"flags-types\\\\\"]}\" --require ./tsconfig-options/required2.js tsconfig-options/log-options2.js`\n        );\n        expect(err).toBe(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).toEqual([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).toEqual(['flags-types']);\n        expect(options.pretty).toBe(undefined);\n        expect(options.skipIgnore).toBe(true);\n        expect(options.transpileOnly).toBe(true);\n        expect(options.require).toEqual([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n          './tsconfig-options/required2.js',\n        ]);\n      });\n\n      test('should have `tsconfig.json` override environment', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_PRETTY: 'true',\n              TS_NODE_SKIP_IGNORE: 'true',\n            },\n          }\n        );\n        expect(err).toBe(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).toEqual([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).toEqual(['tsconfig-tsnode-types']);\n        expect(options.pretty).toBe(true);\n        expect(options.skipIgnore).toBe(false);\n        expect(options.transpileOnly).toBe(true);\n        expect(options.require).toEqual([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n        ]);\n      });\n\n      if (tsSupportsTsconfigInheritanceViaNodePackages) {\n        test('should pull ts-node options from extended `tsconfig.json`', async () => {\n          const { err, stdout } = await exec(\n            `${BIN_PATH} --show-config --project ./tsconfig-extends/tsconfig.json`\n          );\n          expect(err).toBe(null);\n          const config = JSON.parse(stdout);\n          expect(config['ts-node'].require).toEqual([\n            resolve(TEST_DIR, 'tsconfig-extends/other/require-hook.js'),\n          ]);\n          expect(config['ts-node'].scopeDir).toBe(\n            resolve(TEST_DIR, 'tsconfig-extends/other/scopedir')\n          );\n          expect(config['ts-node'].preferTsExts).toBe(true);\n        });\n      }\n    });\n\n    test.suite(\n      'should use implicit @tsconfig/bases config when one is not loaded from disk',\n      ({ context }) => {\n        const test = context(async (t) => ({\n          tempDir: mkdtempSync(join(tmpdir(), 'ts-node-spec')),\n        }));\n        if (\n          semver.gte(ts.version, '3.5.0') &&\n          semver.gte(process.versions.node, '14.0.0')\n        ) {\n          const libAndTarget = semver.gte(process.versions.node, '16.0.0')\n            ? 'es2021'\n            : 'es2020';\n          test('implicitly uses @tsconfig/node14 or @tsconfig/node16 compilerOptions when both TS and node versions support it', async (t) => {\n            // node14 and node16 configs are identical, hence the \"or\"\n            const {\n              context: { tempDir },\n            } = t;\n            const {\n              err: err1,\n              stdout: stdout1,\n              stderr: stderr1,\n            } = await exec(`${BIN_PATH} --showConfig`, { cwd: tempDir });\n            expect(err1).toBe(null);\n            t.like(JSON.parse(stdout1), {\n              compilerOptions: {\n                target: libAndTarget,\n                lib: [libAndTarget],\n              },\n            });\n            const {\n              err: err2,\n              stdout: stdout2,\n              stderr: stderr2,\n            } = await exec(`${BIN_PATH} -pe 10n`, { cwd: tempDir });\n            expect(err2).toBe(null);\n            expect(stdout2).toBe('10n\\n');\n          });\n        } else {\n          test('implicitly uses @tsconfig/* lower than node14 (node12) when either TS or node versions do not support @tsconfig/node14', async ({\n            context: { tempDir },\n          }) => {\n            const { err, stdout, stderr } = await exec(`${BIN_PATH} -pe 10n`, {\n              cwd: tempDir,\n            });\n            expect(err).not.toBe(null);\n            expect(stderr).toMatch(\n              /BigInt literals are not available when targeting lower than|error TS2304: Cannot find name 'n'/\n            );\n          });\n        }\n        test('implicitly loads @types/node even when not installed within local directory', async ({\n          context: { tempDir },\n        }) => {\n          const { err, stdout, stderr } = await exec(\n            `${BIN_PATH} -pe process.env.foo`,\n            {\n              cwd: tempDir,\n              env: { ...process.env, foo: 'hello world' },\n            }\n          );\n          expect(err).toBe(null);\n          expect(stdout).toBe('hello world\\n');\n        });\n        test('implicitly loads local @types/node', async ({\n          context: { tempDir },\n        }) => {\n          await xfs.copyPromise(\n            npath.toPortablePath(tempDir),\n            npath.toPortablePath(join(TEST_DIR, 'local-types-node'))\n          );\n          const { err, stdout, stderr } = await exec(\n            `${BIN_PATH} -pe process.env.foo`,\n            {\n              cwd: tempDir,\n              env: { ...process.env, foo: 'hello world' },\n            }\n          );\n          expect(err).not.toBe(null);\n          expect(stderr).toMatch(\n            \"Property 'env' does not exist on type 'LocalNodeTypes_Process'\"\n          );\n        });\n      }\n    );\n\n    test.suite(\n      'should bundle @tsconfig/bases to be used in your own tsconfigs',\n      (test) => {\n        test.runIf(tsSupportsTsconfigInheritanceViaNodePackages);\n\n        const macro = test.macro((nodeVersion: string) => async (t) => {\n          const config = require(`@tsconfig/${nodeVersion}/tsconfig.json`);\n          const { err, stdout, stderr } = await exec(\n            `${BIN_PATH} --showConfig -e 10n`,\n            {\n              cwd: join(TEST_DIR, 'tsconfig-bases', nodeVersion),\n            }\n          );\n          expect(err).toBe(null);\n          t.like(JSON.parse(stdout), {\n            compilerOptions: {\n              target: config.compilerOptions.target,\n              lib: config.compilerOptions.lib,\n            },\n          });\n        });\n        test(`ts-node/node10/tsconfig.json`, macro, 'node10');\n        test(`ts-node/node12/tsconfig.json`, macro, 'node12');\n        test(`ts-node/node14/tsconfig.json`, macro, 'node14');\n        test(`ts-node/node16/tsconfig.json`, macro, 'node16');\n      }\n    );\n\n    test.suite('compiler host', (test) => {\n      test('should execute cli', async () => {\n        const { err, stdout } = await exec(\n          `${CMD_TS_NODE_WITH_PROJECT_FLAG} --compiler-host hello-world`\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('Hello, world!\\n');\n      });\n    });\n\n    test('should transpile files inside a node_modules directory when not ignored', async () => {\n      const { err, stdout, stderr } = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} from-node-modules/from-node-modules`\n      );\n      if (err)\n        throw new Error(\n          `Unexpected error: ${err}\\nstdout:\\n${stdout}\\nstderr:\\n${stderr}`\n        );\n      expect(JSON.parse(stdout)).toEqual({\n        external: {\n          tsmri: { name: 'typescript-module-required-internally' },\n          jsmri: { name: 'javascript-module-required-internally' },\n          tsmii: { name: 'typescript-module-imported-internally' },\n          jsmii: { name: 'javascript-module-imported-internally' },\n        },\n        tsmie: { name: 'typescript-module-imported-externally' },\n        jsmie: { name: 'javascript-module-imported-externally' },\n        tsmre: { name: 'typescript-module-required-externally' },\n        jsmre: { name: 'javascript-module-required-externally' },\n      });\n    });\n\n    test.suite('should respect maxNodeModulesJsDepth', (test) => {\n      test('for unscoped modules', async () => {\n        const { err, stdout, stderr } = await exec(\n          `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} maxnodemodulesjsdepth`\n        );\n        expect(err).not.toBe(null);\n        expect(stderr.replace(/\\r\\n/g, '\\n')).toMatch(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth/other.ts(4,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n\n      test('for @scoped modules', async () => {\n        const { err, stdout, stderr } = await exec(\n          `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} maxnodemodulesjsdepth-scoped`\n        );\n        expect(err).not.toBe(null);\n        expect(stderr.replace(/\\r\\n/g, '\\n')).toMatch(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth-scoped/other.ts(7,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n    });\n\n    if (tsSupportsShowConfig) {\n      test('--showConfig should log resolved configuration', async (t) => {\n        function native(path: string) {\n          return path.replace(/\\/|\\\\/g, pathSep);\n        }\n        function posix(path: string) {\n          return path.replace(/\\/|\\\\/g, '/');\n        }\n        const { err, stdout } = await exec(\n          `${CMD_TS_NODE_WITH_PROJECT_FLAG} --showConfig`\n        );\n        expect(err).toBe(null);\n        t.is(\n          stdout,\n          JSON.stringify(\n            {\n              'ts-node': {\n                cwd: native(`${ROOT_DIR}/tests`),\n                projectSearchDir: native(`${ROOT_DIR}/tests`),\n                project: native(`${ROOT_DIR}/tests/tsconfig.json`),\n              },\n              compilerOptions: {\n                target: 'es6',\n                jsx: 'react',\n                noEmit: false,\n                strict: true,\n                typeRoots: [\n                  posix(`${ROOT_DIR}/tests/typings`),\n                  posix(`${ROOT_DIR}/node_modules/@types`),\n                ],\n                sourceMap: true,\n                inlineSourceMap: false,\n                inlineSources: true,\n                declaration: false,\n                outDir: './.ts-node',\n                module: 'commonjs',\n              },\n            },\n            null,\n            2\n          ) + '\\n'\n        );\n      });\n    } else {\n      test('--show-config should log error message when used with old typescript versions', async (t) => {\n        const { err, stderr } = await exec(\n          `${CMD_TS_NODE_WITH_PROJECT_FLAG} --showConfig`\n        );\n        expect(err).not.toBe(null);\n        expect(stderr).toMatch('Error: --showConfig requires');\n      });\n    }\n\n    test('should support compiler scope specified via tsconfig.json', async (t) => {\n      const { err, stderr, stdout } = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project ./scope/c/config/tsconfig.json ./scope/c/index.js`\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe(`value\\nFailures: 0\\n`);\n    });\n  });\n\n  test.suite('create', ({ context }) => {\n    const test = context(async (t) => {\n      return {\n        service: t.context.tsNodeUnderTest.create({\n          compilerOptions: { target: 'es5' },\n          skipProject: true,\n        }),\n      };\n    });\n\n    test('should create generic compiler instances', ({\n      context: { service },\n    }) => {\n      const output = service.compile('const x = 10', 'test.ts');\n      expect(output).toMatch('var x = 10;');\n    });\n\n    test.suite('should get type information', (test) => {\n      test('given position of identifier', ({ context: { service } }) => {\n        expect(\n          service.getTypeInfo('/**jsdoc here*/const x = 10', 'test.ts', 21)\n        ).toEqual({\n          comment: 'jsdoc here',\n          name: 'const x: 10',\n        });\n      });\n      test('given position that does not point to an identifier', ({\n        context: { service },\n      }) => {\n        expect(\n          service.getTypeInfo('/**jsdoc here*/const x = 10', 'test.ts', 0)\n        ).toEqual({\n          comment: '',\n          name: '',\n        });\n      });\n    });\n  });\n\n  test.suite('issue #1098', (test) => {\n    function testAllowedExtensions(\n      t: ExecutionContext<ctxTsNode.Ctx>,\n      compilerOptions: CreateOptions['compilerOptions'],\n      allowed: string[]\n    ) {\n      const disallowed = allExtensions.filter((ext) => !allowed.includes(ext));\n      const { ignored } = t.context.tsNodeUnderTest.create({\n        compilerOptions,\n        skipProject: true,\n      });\n      for (const ext of allowed) {\n        t.log(`Testing that ${ext} files are allowed`);\n        expect(ignored(join(DIST_DIR, `index${ext}`))).toBe(false);\n      }\n      for (const ext of disallowed) {\n        t.log(`Testing that ${ext} files are ignored`);\n        expect(ignored(join(DIST_DIR, `index${ext}`))).toBe(true);\n      }\n    }\n\n    const allExtensions = [\n      '.ts',\n      '.js',\n      '.d.ts',\n      '.mts',\n      '.cts',\n      '.d.mts',\n      '.d.cts',\n      '.mjs',\n      '.cjs',\n      '.tsx',\n      '.jsx',\n      '.xyz',\n      '',\n    ];\n    const mtsCts = tsSupportsMtsCtsExtensions\n      ? ['.mts', '.cts', '.d.mts', '.d.cts']\n      : [];\n    const mjsCjs = tsSupportsMtsCtsExtensions ? ['.mjs', '.cjs'] : [];\n\n    test('correctly filters file extensions from the compiler when allowJs=false and jsx=false', (t) => {\n      testAllowedExtensions(t, {}, ['.ts', '.d.ts', ...mtsCts]);\n    });\n    test('correctly filters file extensions from the compiler when allowJs=true and jsx=false', (t) => {\n      testAllowedExtensions(t, { allowJs: true }, [\n        '.ts',\n        '.js',\n        '.d.ts',\n        ...mtsCts,\n        ...mjsCjs,\n      ]);\n    });\n    test('correctly filters file extensions from the compiler when allowJs=false and jsx=true', (t) => {\n      testAllowedExtensions(t, { allowJs: false, jsx: 'preserve' }, [\n        '.ts',\n        '.tsx',\n        '.d.ts',\n        ...mtsCts,\n      ]);\n    });\n    test('correctly filters file extensions from the compiler when allowJs=true and jsx=true', (t) => {\n      testAllowedExtensions(t, { allowJs: true, jsx: 'preserve' }, [\n        '.ts',\n        '.tsx',\n        '.js',\n        '.jsx',\n        '.d.ts',\n        ...mtsCts,\n        ...mjsCjs,\n      ]);\n    });\n  });\n});\n\ntest('Falls back to transpileOnly when ts compiler returns emitSkipped', async () => {\n  const { err, stdout } = await exec(\n    `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project tsconfig.json ./outside-rootDir/foo.js`,\n    {\n      cwd: join(TEST_DIR, 'emit-skipped-fallback'),\n    }\n  );\n  expect(err).toBe(null);\n  expect(stdout).toBe('foo\\n');\n});\n\ntest.suite('node environment', (test) => {\n  test.suite('Sets argv and execArgv correctly in forked processes', (test) => {\n    forkTest(`node --no-warnings ${BIN_PATH_JS}`, BIN_PATH_JS, '--no-warnings');\n    forkTest(\n      `${BIN_PATH}`,\n      process.platform === 'win32' ? BIN_PATH_JS : BIN_PATH\n    );\n\n    function forkTest(\n      command: string,\n      expectParentArgv0: string,\n      nodeFlag?: string\n    ) {\n      test(command, async (t) => {\n        const { err, stderr, stdout } = await exec(\n          `${command} --skipIgnore ./recursive-fork/index.ts argv2`\n        );\n        expect(err).toBeNull();\n        expect(stderr).toBe('');\n        const generations = stdout.split('\\n');\n        const expectation = {\n          execArgv: [nodeFlag, BIN_PATH_JS, '--skipIgnore'].filter((v) => v),\n          argv: [\n            // Note: argv[0] is *always* BIN_PATH_JS in child & grandchild\n            expectParentArgv0,\n            resolve(TEST_DIR, 'recursive-fork/index.ts'),\n            'argv2',\n          ],\n        };\n        expect(JSON.parse(generations[0])).toMatchObject(expectation);\n        expectation.argv[0] = BIN_PATH_JS;\n        expect(JSON.parse(generations[1])).toMatchObject(expectation);\n        expect(JSON.parse(generations[2])).toMatchObject(expectation);\n      });\n    }\n  });\n});\n\ntest('Detect when typescript adds new ModuleKind values; flag as a failure so we can update our code flagged [MUST_UPDATE_FOR_NEW_MODULEKIND]', async () => {\n  // We have marked a few places in our code with MUST_UPDATE_FOR_NEW_MODULEKIND to make it easier to update them when TS adds new ModuleKinds\n  const foundKeys: string[] = [];\n  function check(value: number, name: string, required: boolean) {\n    if (required) expect(ts.ModuleKind[name]).toBe(value);\n    if (ts.ModuleKind[value] === undefined) {\n      expect(ts.ModuleKind[name]).toBeUndefined();\n    } else {\n      expect(ts.ModuleKind[value]).toBe(name);\n      foundKeys.push(name, `${value}`);\n    }\n  }\n  check(0, 'None', true);\n  check(1, 'CommonJS', true);\n  check(2, 'AMD', true);\n  check(3, 'UMD', true);\n  check(4, 'System', true);\n  check(5, 'ES2015', true);\n  try {\n    check(6, 'ES2020', false);\n    check(99, 'ESNext', true);\n  } catch {\n    // the value changed: is `99` now, but was `6` in TS 2.7\n    check(6, 'ESNext', true);\n    expect(ts.ModuleKind[99]).toBeUndefined();\n  }\n  check(7, 'ES2022', false);\n  if (tsSupportsStableNodeNextNode16) {\n    check(100, 'Node16', true);\n  } else {\n    check(100, 'Node12', false);\n  }\n  check(199, 'NodeNext', false);\n  const actualKeys = Object.keys(ts.ModuleKind);\n  actualKeys.sort();\n  foundKeys.sort();\n  expect(actualKeys).toEqual(foundKeys);\n});\n"]}