{"version":3,"file":"module-node.spec.js","sourceRoot":"","sources":["../../../src/test/module-node/module-node.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, context } from '../testlib';\nimport {\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  isOneOf,\n  nodeSupportsImportingTransformedCjsFromEsm,\n  resetNodeEnvironment,\n  tsSupportsStableNodeNextNode16,\n} from '../helpers';\nimport * as Path from 'path';\nimport { ctxTsNode } from '../helpers';\nimport { exec } from '../exec-helpers';\nimport { file, project, ProjectAPI as ProjectAPI } from '../fs-helpers';\n\nconst test = context(ctxTsNode);\ntest.beforeEach(async () => {\n  resetNodeEnvironment();\n});\ntype Test = typeof test;\n\n// Declare one test case for each permutations of project configuration\ntest.suite('TypeScript module=NodeNext and Node16', (test) => {\n  test.runIf(\n    tsSupportsStableNodeNextNode16 && nodeSupportsImportingTransformedCjsFromEsm\n  );\n\n  for (const allowJs of [true, false]) {\n    for (const typecheckMode of [\n      'typecheck',\n      'transpileOnly',\n      'swc',\n    ] as const) {\n      for (const packageJsonType of [\n        undefined,\n        'commonjs',\n        'module',\n      ] as const) {\n        for (const tsModuleMode of ['NodeNext', 'Node16'] as const) {\n          declareTest(test, {\n            allowJs,\n            packageJsonType,\n            typecheckMode,\n            tsModuleMode,\n          });\n        }\n      }\n    }\n  }\n});\n\nfunction declareTest(test: Test, testParams: TestParams) {\n  const name = `package-json-type=${testParams.packageJsonType} allowJs=${testParams.allowJs} ${testParams.typecheckMode} tsconfig-module=${testParams.tsModuleMode}`;\n\n  test(name, async (t) => {\n    const proj = writeFixturesToFilesystem(name, testParams);\n\n    t.log(\n      `Running this command: ( cd ${proj.cwd} ; ${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --esm ./index.mjs )`\n    );\n\n    // All assertions happen within the fixture scripts\n    // Zero exit code indicates a passing test\n    const { stdout, stderr, err } = await exec(\n      `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --esm ./index.mjs`,\n      { cwd: proj.cwd }\n    );\n    t.log(stdout);\n    t.log(stderr);\n    expect(err).toBe(null);\n    expect(stdout).toMatch(/done\\n$/);\n  });\n}\n\ntype PackageJsonType = typeof packageJsonTypes[number];\nconst packageJsonTypes = [undefined, 'commonjs', 'module'] as const;\nconst typecheckModes = ['typecheck', 'transpileOnly', 'swc'] as const;\nconst importStyles = [\n  'static import',\n  'require',\n  'dynamic import',\n  'import = require',\n] as const;\nconst importExtension = ['js', 'ts', 'omitted'] as const;\n\ninterface Extension {\n  ext: string;\n  jsEquivalentExt?: string;\n  forcesCjs?: boolean;\n  forcesEsm?: boolean;\n  isJs?: boolean;\n  supportsJsx?: boolean;\n  isJsxExt?: boolean;\n  cjsAllowsOmittingExt?: boolean;\n}\nconst extensions: Extension[] = [\n  {\n    ext: 'cts',\n    jsEquivalentExt: 'cjs',\n    forcesCjs: true,\n  },\n  {\n    ext: 'cjs',\n    forcesCjs: true,\n    isJs: true,\n  },\n  {\n    ext: 'mts',\n    jsEquivalentExt: 'mjs',\n    forcesEsm: true,\n  },\n  {\n    ext: 'mjs',\n    forcesEsm: true,\n    isJs: true,\n  },\n  {\n    ext: 'ts',\n    jsEquivalentExt: 'js',\n    cjsAllowsOmittingExt: true,\n  },\n  {\n    ext: 'tsx',\n    jsEquivalentExt: 'js',\n    supportsJsx: true,\n    isJsxExt: true,\n    cjsAllowsOmittingExt: true,\n  },\n  {\n    ext: 'jsx',\n    jsEquivalentExt: 'js',\n    isJs: true,\n    supportsJsx: true,\n    isJsxExt: true,\n    cjsAllowsOmittingExt: true,\n  },\n  {\n    ext: 'js',\n    isJs: true,\n    cjsAllowsOmittingExt: true,\n  },\n];\n/**\n * Describe how a given project config handles files with this extension.\n * For example, projects with allowJs:false do not like .jsx\n */\nfunction getExtensionTreatment(ext: Extension, testParams: TestParams) {\n  // JSX and any TS extensions get compiled.  Everything is compiled in allowJs mode\n  const isCompiled = testParams.allowJs || !ext.isJs || ext.isJsxExt;\n  const isExecutedAsEsm =\n    ext.forcesEsm ||\n    (!ext.forcesCjs && testParams.packageJsonType === 'module');\n  const isExecutedAsCjs = !isExecutedAsEsm;\n  // if allowJs:false, then .jsx files are not allowed\n  const isAllowed = !ext.isJsxExt || !ext.isJs || testParams.allowJs;\n  const canHaveJsxSyntax = ext.isJsxExt || (ext.supportsJsx && isCompiled);\n  return {\n    isCompiled,\n    isExecutedAsCjs,\n    isExecutedAsEsm,\n    isAllowed,\n    canHaveJsxSyntax,\n  };\n}\n\ninterface TestParams {\n  packageJsonType: PackageJsonType;\n  typecheckMode: typeof typecheckModes[number];\n  allowJs: boolean;\n  tsModuleMode: 'NodeNext' | 'Node16';\n}\n\ninterface ImporterParams {\n  importStyle: typeof importStyles[number];\n  importerExtension: typeof extensions[number];\n}\n\ninterface ImporteeParams {\n  importeeExtension: typeof extensions[number];\n}\n\nfunction writeFixturesToFilesystem(name: string, testParams: TestParams) {\n  const { packageJsonType, allowJs, typecheckMode, tsModuleMode } = testParams;\n\n  const proj = project(name.replace(/ /g, '_'));\n\n  proj.addJsonFile('package.json', {\n    type: packageJsonType,\n  });\n\n  proj.addJsonFile('tsconfig.json', {\n    compilerOptions: {\n      allowJs,\n      target: 'esnext',\n      module: tsModuleMode,\n      jsx: 'react',\n    },\n    'ts-node': {\n      transpileOnly: typecheckMode === 'transpileOnly' || undefined,\n      swc: typecheckMode === 'swc',\n      experimentalResolver: true,\n    },\n  });\n\n  const indexFile = file('index.mjs', ``);\n  proj.add(indexFile);\n\n  for (const importStyle of importStyles) {\n    for (const importerExtension of extensions) {\n      const importer = createImporter(proj, testParams, {\n        importStyle,\n        importerExtension,\n      });\n      if (!importer) continue;\n\n      let importSpecifier = `./${Path.relative(proj.cwd, importer.path)}`;\n      importSpecifier = replaceExtension(\n        importSpecifier,\n        importerExtension.jsEquivalentExt ?? importerExtension.ext\n      );\n      indexFile.content += `await import('${importSpecifier}');\\n`;\n    }\n  }\n\n  indexFile.content += `console.log('done');\\n`;\n\n  proj.rm();\n  proj.write();\n  return proj;\n}\n\nfunction createImporter(\n  proj: ProjectAPI,\n  testParams: TestParams,\n  importerParams: ImporterParams\n) {\n  const { importStyle, importerExtension } = importerParams;\n  const name = `${importStyle} from ${importerExtension.ext}`;\n\n  const importerTreatment = getExtensionTreatment(\n    importerExtension,\n    testParams\n  );\n\n  if (!importerTreatment.isAllowed) return;\n  // import = require only allowed in non-js files\n  if (importStyle === 'import = require' && importerExtension.isJs) return;\n  // const = require not allowed in ESM\n  if (importStyle === 'require' && importerTreatment.isExecutedAsEsm) return;\n  // swc bug: import = require will not work in ESM, because swc does not emit necessary `__require = createRequire()`\n  if (\n    testParams.typecheckMode === 'swc' &&\n    importStyle === 'import = require' &&\n    importerTreatment.isExecutedAsEsm\n  )\n    return;\n\n  const importer = {\n    path: `${name.replace(/ /g, '_')}.${importerExtension.ext}`,\n    imports: '',\n    assertions: '',\n    get content() {\n      return `\n          ${this.imports}\n          async function main() {\n            ${this.assertions}\n          }\n          main();\n        `;\n    },\n  };\n  proj.add(importer);\n\n  if (!importerExtension.isJs) importer.imports += `export {};\\n`;\n\n  for (const importeeExtension of extensions) {\n    const ci = createImportee(testParams, { importeeExtension });\n    if (!ci) continue;\n    const { importee, treatment: importeeTreatment } = ci;\n    proj.add(importee);\n\n    // dynamic import is the only way to import ESM from CJS\n    if (\n      importeeTreatment.isExecutedAsEsm &&\n      importerTreatment.isExecutedAsCjs &&\n      importStyle !== 'dynamic import'\n    )\n      continue;\n    // Cannot import = require an ESM file\n    if (importeeTreatment.isExecutedAsEsm && importStyle === 'import = require')\n      continue;\n    // Cannot use static imports in non-compiled non-ESM\n    if (\n      importStyle === 'static import' &&\n      !importerTreatment.isCompiled &&\n      importerTreatment.isExecutedAsCjs\n    )\n      continue;\n\n    let importSpecifier = `./${importeeExtension.ext}`;\n    if (\n      !importeeExtension.cjsAllowsOmittingExt ||\n      isOneOf(importStyle, ['dynamic import', 'static import'])\n    )\n      importSpecifier +=\n        '.' + (importeeExtension.jsEquivalentExt ?? importeeExtension.ext);\n\n    switch (importStyle) {\n      case 'dynamic import':\n        importer.assertions += `const ${importeeExtension.ext} = await import('${importSpecifier}');\\n`;\n        break;\n      case 'import = require':\n        importer.imports += `import ${importeeExtension.ext} = require('${importSpecifier}');\\n`;\n        break;\n      case 'require':\n        importer.imports += `const ${importeeExtension.ext} = require('${importSpecifier}');\\n`;\n        break;\n      case 'static import':\n        importer.imports += `import * as ${importeeExtension.ext} from '${importSpecifier}';\\n`;\n        break;\n    }\n\n    // Check both namespace.ext and namespace.default.ext, because node can't detect named exports from files we transform\n    const namespaceAsAny = importerExtension.isJs\n      ? importeeExtension.ext\n      : `(${importeeExtension.ext} as any)`;\n    importer.assertions += `if((${importeeExtension.ext}.ext ?? ${namespaceAsAny}.default.ext) !== '${importeeExtension.ext}')\\n`;\n    importer.assertions += `  throw new Error('Wrong export from importee: expected ${importeeExtension.ext} but got ' + ${importeeExtension.ext}.ext + '(importee has these keys: ' + Object.keys(${importeeExtension.ext}) + ')');\\n`;\n  }\n  return importer;\n}\nfunction createImportee(\n  testParams: TestParams,\n  importeeParams: ImporteeParams\n) {\n  const { importeeExtension } = importeeParams;\n  const importee = file(`${importeeExtension.ext}.${importeeExtension.ext}`);\n  const treatment = getExtensionTreatment(importeeExtension, testParams);\n  if (!treatment.isAllowed) return;\n  if (treatment.isCompiled || treatment.isExecutedAsEsm) {\n    importee.content += `export const ext = '${importeeExtension.ext}';\\n`;\n  } else {\n    importee.content += `exports.ext = '${importeeExtension.ext}';\\n`;\n  }\n  if (!importeeExtension.isJs) {\n    importee.content += `const testTsTypeSyntax: string = 'a string';\\n`;\n  }\n  if (treatment.isExecutedAsCjs) {\n    importee.content += `if(typeof __filename !== 'string') throw new Error('expected file to be CJS but __filename is not declared');\\n`;\n  } else {\n    importee.content += `if(typeof __filename !== 'undefined') throw new Error('expected file to be ESM but __filename is declared');\\n`;\n    importee.content += `if(typeof import.meta.url !== 'string') throw new Error('expected file to be ESM but import.meta.url is not declared');\\n`;\n  }\n  if (treatment.canHaveJsxSyntax) {\n    importee.content += `\n          const React = {\n            createElement(tag, dunno, content) {\n              return {props: {children: [content]}};\n            }\n          };\n          const jsxTest = <a>Hello World</a>;\n          if(jsxTest?.props?.children[0] !== 'Hello World') throw new Error('Expected ${importeeExtension.ext} to support JSX but it did not.');\n        `;\n  }\n  return { importee, treatment };\n}\n\nfunction replaceExtension(path: string, ext: string) {\n  return Path.posix.format({\n    ...Path.parse(path),\n    ext: '.' + ext,\n    base: undefined,\n  });\n}\n"]}