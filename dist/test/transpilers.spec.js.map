{"version":3,"file":"transpilers.spec.js","sourceRoot":"","sources":["../../src/test/transpilers.spec.ts"],"names":[],"mappings":";AAAA,kDAAkD;AAClD,2FAA2F;AAC3F,gCAAgC;;AAEhC,uCAAoC;AACpC,uCAAuD;AACvD,iCAAiC;AAEjC,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,mBAAS,CAAC,CAAC;AAEhC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;IACzB,IAAI,CAAC,uFAAuF,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;QACxG,MAAM,aAAa,GAAG,IAAA,yBAAe,EACnC,sCAAsC,CACA,CAAC;QAEzC,sDAAsD;QACtD,MAAM,EAAE,GAAG,IAAA,yBAAe,EAAC,YAAY,CAAgC,CAAC;QACxE,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE;YAC9C,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;gBAAE,SAAS;YAChC,IAAI,GAAG,KAAK,MAAM;gBAAE,SAAS;YAC7B,MAAM,CACJ,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,GAAU,CAAQ,CAAC,CACpE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACd;QAED,iDAAiD;QACjD,8DAA8D;QAC9D,MAAM,GAAG,GAAG,IAAA,yBAAe,EAAC,WAAW,CAAC,CAAC;QACzC,IAAI,GAAG,GAAuB,SAAS,CAAC;QACxC,IAAI;YACF,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;SACvD;QAAC,OAAO,CAAC,EAAE;YACV,GAAG,GAAI,CAAW,CAAC,OAAO,CAAC;SAC5B;QACD,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,oBAAoB;QACpB,oJAAoJ;QACpJ,MAAM,KAAK,GAAG,GAAI,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAC5E,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5B,MAAM,OAAO,GAAG,KAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEzE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,CAAC,CAAC,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACrE;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// third-party transpiler and swc transpiler tests\n// TODO: at the time of writing, other transpiler tests have not been moved into this file.\n// Should consolidate them here.\n\nimport { context } from './testlib';\nimport { ctxTsNode, testsDirRequire } from './helpers';\nimport * as expect from 'expect';\n\nconst test = context(ctxTsNode);\n\ntest.suite('swc', (test) => {\n  test('verify that TS->SWC target mappings suppport all possible values from both TS and SWC', async (t) => {\n    const swcTranspiler = testsDirRequire(\n      'ts-node/transpilers/swc-experimental'\n    ) as typeof import('../transpilers/swc');\n\n    // Detect when mapping is missing any ts.ScriptTargets\n    const ts = testsDirRequire('typescript') as typeof import('typescript');\n    for (const key of Object.keys(ts.ScriptTarget)) {\n      if (/^\\d+$/.test(key)) continue;\n      if (key === 'JSON') continue;\n      expect(\n        swcTranspiler.targetMapping.has(ts.ScriptTarget[key as any] as any)\n      ).toBe(true);\n    }\n\n    // Detect when mapping is missing any swc targets\n    // Assuming that tests/package.json declares @swc/core: latest\n    const swc = testsDirRequire('@swc/core');\n    let msg: string | undefined = undefined;\n    try {\n      swc.transformSync('', { jsc: { target: 'invalid' } });\n    } catch (e) {\n      msg = (e as Error).message;\n    }\n    expect(msg).toBeDefined();\n    // Error looks like:\n    // unknown variant `invalid`, expected one of `es3`, `es5`, `es2015`, `es2016`, `es2017`, `es2018`, `es2019`, `es2020`, `es2021` at line 1 column 28\n    const match = msg!.match(/unknown variant.*, expected one of (.*) at line/);\n    expect(match).toBeDefined();\n    const targets = match![1].split(', ').map((v: string) => v.slice(1, -1));\n\n    for (const target of targets) {\n      expect([...swcTranspiler.targetMapping.values()]).toContain(target);\n    }\n  });\n});\n"]}