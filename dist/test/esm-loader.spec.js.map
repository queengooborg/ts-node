{"version":3,"file":"esm-loader.spec.js","sourceRoot":"","sources":["../../src/test/esm-loader.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// ESM loader hook tests\n// TODO: at the time of writing, other ESM loader hook tests have not been moved into this file.\n// Should consolidate them here.\n\nimport { context } from './testlib';\nimport semver = require('semver');\nimport {\n  BIN_ESM_PATH,\n  BIN_PATH,\n  BIN_PATH_JS,\n  CMD_ESM_LOADER_WITHOUT_PROJECT,\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  ctxTsNode,\n  delay,\n  EXPERIMENTAL_MODULES_FLAG,\n  nodeSupportsEsmHooks,\n  nodeSupportsImportAssertions,\n  nodeSupportsImportAssertionsTypeJson,\n  nodeSupportsSpawningChildProcess,\n  nodeUsesNewHooksApi,\n  resetNodeEnvironment,\n  TEST_DIR,\n} from './helpers';\nimport { createExec, createSpawn, ExecReturn } from './exec-helpers';\nimport { join, resolve } from 'path';\nimport * as expect from 'expect';\nimport type { NodeLoaderHooksAPI2 } from '../';\nimport { pathToFileURL } from 'url';\n\nconst test = context(ctxTsNode);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\nconst spawn = createSpawn({\n  cwd: TEST_DIR,\n});\n\ntest.suite('esm', (test) => {\n  test.suite('when node supports loader hooks', (test) => {\n    test.runIf(nodeSupportsEsmHooks);\n    test('should compile and execute as ESM', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`,\n        {\n          cwd: join(TEST_DIR, './esm'),\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('foo bar baz biff libfoo\\n');\n    });\n    test('should use source maps', async (t) => {\n      const { err, stdout, stderr } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} \"throw error.ts\"`,\n        {\n          cwd: join(TEST_DIR, './esm'),\n        }\n      );\n      expect(err).not.toBe(null);\n      const expectedModuleUrl = pathToFileURL(\n        join(TEST_DIR, './esm/throw error.ts')\n      ).toString();\n      expect(err!.message).toMatch(\n        [\n          `${expectedModuleUrl}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n          `    at Foo.bar (${expectedModuleUrl}:100:17)`,\n        ].join('\\n')\n      );\n    });\n\n    test.suite('supports experimental-specifier-resolution=node', (test) => {\n      test('via --experimental-specifier-resolution', async () => {\n        const { err, stdout } = await exec(\n          `${CMD_ESM_LOADER_WITHOUT_PROJECT} --experimental-specifier-resolution=node index.ts`,\n          { cwd: join(TEST_DIR, './esm-node-resolver') }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('foo bar baz biff libfoo\\n');\n      });\n      test('via --es-module-specifier-resolution alias', async () => {\n        const { err, stdout } = await exec(\n          `${CMD_ESM_LOADER_WITHOUT_PROJECT} ${EXPERIMENTAL_MODULES_FLAG} --es-module-specifier-resolution=node index.ts`,\n          { cwd: join(TEST_DIR, './esm-node-resolver') }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('foo bar baz biff libfoo\\n');\n      });\n      test('via NODE_OPTIONS', async () => {\n        const { err, stdout } = await exec(\n          `${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`,\n          {\n            cwd: join(TEST_DIR, './esm-node-resolver'),\n            env: {\n              ...process.env,\n              NODE_OPTIONS: `${EXPERIMENTAL_MODULES_FLAG} --experimental-specifier-resolution=node`,\n            },\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe('foo bar baz biff libfoo\\n');\n      });\n    });\n\n    test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is enabled', async () => {\n      const { err, stderr } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./index.js`,\n        {\n          cwd: join(TEST_DIR, './esm-err-require-esm'),\n        }\n      );\n      expect(err).not.toBe(null);\n      expect(stderr).toMatch(\n        'Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:'\n      );\n    });\n\n    test('defers to fallback loaders when URL should not be handled by ts-node', async () => {\n      const { err, stdout, stderr } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} index.mjs`,\n        {\n          cwd: join(TEST_DIR, './esm-import-http-url'),\n        }\n      );\n      expect(err).not.toBe(null);\n      // expect error from node's default resolver\n      expect(stderr).toMatch(\n        /Error \\[ERR_UNSUPPORTED_ESM_URL_SCHEME\\]:.*(?:\\n.*){0,2}\\n *at defaultResolve/\n      );\n    });\n\n    test('should bypass import cache when changing search params', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`,\n        {\n          cwd: join(TEST_DIR, './esm-import-cache'),\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('log1\\nlog2\\nlog2\\n');\n    });\n\n    test('should support transpile only mode via dedicated loader entrypoint', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT}/transpile-only index.ts`,\n        {\n          cwd: join(TEST_DIR, './esm-transpile-only'),\n        }\n      );\n      expect(err).toBe(null);\n      expect(stdout).toBe('');\n    });\n    test('should throw type errors without transpile-only enabled', async () => {\n      const { err, stdout } = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`,\n        {\n          cwd: join(TEST_DIR, './esm-transpile-only'),\n        }\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch('Unable to compile TypeScript');\n      expect(err.message).toMatch(\n        new RegExp(\n          \"TS2345: Argument of type '(?:number|1101)' is not assignable to parameter of type 'string'\\\\.\"\n        )\n      );\n      expect(err.message).toMatch(\n        new RegExp(\n          \"TS2322: Type '(?:\\\"hello world\\\"|string)' is not assignable to type 'number'\\\\.\"\n        )\n      );\n      expect(stdout).toBe('');\n    });\n\n    test.suite('moduleTypes', (test) => {\n      suite('with vanilla ts transpilation', 'tsconfig.json');\n      suite('with third-party-transpiler', 'tsconfig-swc.json');\n      function suite(name: string, tsconfig: string) {\n        test.suite(name, (test) => {\n          test('supports CJS webpack.config.ts in an otherwise ESM project', async (t) => {\n            // A notable case where you can use ts-node's CommonJS loader, not the ESM loader, in an ESM project:\n            // when loading a webpack.config.ts or similar config\n            const { err, stdout } = await exec(\n              `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project ./module-types/override-to-cjs/${tsconfig} ./module-types/override-to-cjs/test-webpack-config.cjs`\n            );\n            expect(err).toBe(null);\n            expect(stdout).toBe(``);\n          });\n          test('should allow importing CJS in an otherwise ESM project', async (t) => {\n            await run('override-to-cjs', tsconfig, 'cjs');\n            if (semver.gte(process.version, '14.13.1'))\n              await run('override-to-cjs', tsconfig, 'mjs');\n          });\n          test('should allow importing ESM in an otherwise CJS project', async (t) => {\n            await run('override-to-esm', tsconfig, 'cjs');\n            // Node 14.13.0 has a bug(?) where it checks for ESM-only syntax *before* we transform the code.\n            if (semver.gte(process.version, '14.13.1'))\n              await run('override-to-esm', tsconfig, 'mjs');\n          });\n        });\n      }\n      async function run(project: string, config: string, ext: string) {\n        const { err, stderr, stdout } = await exec(\n          `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./module-types/${project}/test.${ext}`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_PROJECT: `./module-types/${project}/${config}`,\n            },\n          }\n        );\n        expect(err).toBe(null);\n        expect(stdout).toBe(`Failures: 0\\n`);\n      }\n    });\n\n    test.suite('createEsmHooks()', (test) => {\n      test('should create proper hooks with provided instance', async () => {\n        const { err } = await exec(\n          `node ${EXPERIMENTAL_MODULES_FLAG} --loader ./loader.mjs index.ts`,\n          {\n            cwd: join(TEST_DIR, './esm-custom-loader'),\n          }\n        );\n\n        if (err === null) {\n          throw new Error('Command was expected to fail, but it succeeded.');\n        }\n\n        expect(err.message).toMatch(/TS6133:\\s+'unusedVar'/);\n      });\n    });\n\n    test.suite('unit test hooks', ({ context }) => {\n      const test = context(async (t) => {\n        const service = t.context.tsNodeUnderTest.create({\n          cwd: TEST_DIR,\n        });\n        t.teardown(() => {\n          resetNodeEnvironment();\n        });\n        return {\n          service,\n          hooks: t.context.tsNodeUnderTest.createEsmHooks(service),\n        };\n      });\n\n      test.suite('data URIs', (test) => {\n        test.runIf(nodeUsesNewHooksApi);\n\n        test('Correctly determines format of data URIs', async (t) => {\n          const { hooks } = t.context;\n          const url = 'data:text/javascript,console.log(\"hello world\");';\n          const result = await (hooks as NodeLoaderHooksAPI2).load(\n            url,\n            { format: undefined },\n            async (url, context, _ignored) => {\n              return { format: context.format!, source: '' };\n            }\n          );\n          expect(result.format).toBe('module');\n        });\n      });\n    });\n\n    test.suite('supports import assertions', (test) => {\n      test.runIf(nodeSupportsImportAssertions);\n\n      test.suite('node >=16.15.0 <17.0.0 | >=17.5.0', (test) => {\n        test.runIf(nodeSupportsImportAssertionsTypeJson);\n\n        test('Can import JSON modules with appropriate assertion', async (t) => {\n          const { err, stdout } = await exec(\n            `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./importJson.ts`,\n            {\n              cwd: resolve(TEST_DIR, 'esm-import-assertions'),\n            }\n          );\n          expect(err).toBe(null);\n          expect(stdout.trim()).toBe(\n            'A fuchsia car has 2 seats and the doors are open.\\nDone!'\n          );\n        });\n      });\n\n      test.suite('node <16.15.0 | 17.0.0> <17.5.0', (test) => {\n        test.runIf(!nodeSupportsImportAssertionsTypeJson);\n\n        test('Can import JSON using the appropriate flag and assertion', async (t) => {\n          const { err, stdout } = await exec(\n            `${CMD_ESM_LOADER_WITHOUT_PROJECT} --experimental-json-modules ./importJson.ts`,\n            {\n              cwd: resolve(TEST_DIR, 'esm-import-assertions'),\n            }\n          );\n          expect(err).toBe(null);\n          expect(stdout.trim()).toBe(\n            'A fuchsia car has 2 seats and the doors are open.\\nDone!'\n          );\n        });\n      });\n    });\n\n    test.suite(\n      'Entrypoint resolution falls back to CommonJS resolver and format',\n      (test) => {\n        test('extensionless entrypoint', async (t) => {\n          const { err, stdout } = await exec(\n            `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/extensionless-entrypoint`\n          );\n          expect(err).toBe(null);\n          expect(stdout.trim()).toBe('Hello world!');\n        });\n        test('relies upon CommonJS resolution', async (t) => {\n          const { err, stdout } = await exec(\n            `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/relies-upon-cjs-resolution`\n          );\n          expect(err).toBe(null);\n          expect(stdout.trim()).toBe('Hello world!');\n        });\n        test('fails as expected when entrypoint does not exist at all', async (t) => {\n          const { err, stderr } = await exec(\n            `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/does-not-exist`\n          );\n          expect(err).toBeDefined();\n          expect(stderr).toContain(`Cannot find module `);\n        });\n      }\n    );\n\n    test.suite('spawns child process', async (test) => {\n      test.runIf(nodeSupportsSpawningChildProcess);\n\n      basic('ts-node-esm executable', () =>\n        exec(`${BIN_ESM_PATH} ./esm-child-process/via-flag/index.ts foo bar`)\n      );\n      basic('ts-node --esm flag', () =>\n        exec(`${BIN_PATH} --esm ./esm-child-process/via-flag/index.ts foo bar`)\n      );\n      basic('ts-node w/tsconfig esm:true', () =>\n        exec(\n          `${BIN_PATH} --esm ./esm-child-process/via-tsconfig/index.ts foo bar`\n        )\n      );\n\n      function basic(title: string, cb: () => ExecReturn) {\n        test(title, async (t) => {\n          const { err, stdout, stderr } = await cb();\n          expect(err).toBe(null);\n          expect(stdout.trim()).toBe('CLI args: foo bar');\n          expect(stderr).toBe('');\n        });\n      }\n\n      test.suite('parent passes signals to child', (test) => {\n        test.runSerially();\n\n        signalTest('SIGINT');\n        signalTest('SIGTERM');\n\n        function signalTest(signal: string) {\n          test(signal, async (t) => {\n            const childP = spawn([\n              // exec lets us run the shims on windows; spawn does not\n              process.execPath,\n              BIN_PATH_JS,\n              `./esm-child-process/via-tsconfig/sleep.ts`,\n            ]);\n            let code: number | null | undefined = undefined;\n            childP.child.on('exit', (_code) => (code = _code));\n            await delay(6e3);\n            const codeAfter6Seconds = code;\n            process.kill(childP.child.pid, signal);\n            await delay(2e3);\n            const codeAfter8Seconds = code;\n            const { stdoutP, stderrP } = await childP;\n            const stdout = await stdoutP;\n            const stderr = await stderrP;\n            t.log({\n              stdout,\n              stderr,\n              codeAfter6Seconds,\n              codeAfter8Seconds,\n              code,\n            });\n            expect(codeAfter6Seconds).toBeUndefined();\n            if (process.platform === 'win32') {\n              // Windows doesn't have signals, and node attempts an imperfect facsimile.\n              // In Windows, SIGINT and SIGTERM kill the process immediately with exit\n              // code 1, and the process can't catch or prevent this.\n              expect(codeAfter8Seconds).toBe(1);\n              expect(code).toBe(1);\n            } else {\n              expect(codeAfter8Seconds).toBe(undefined);\n              expect(code).toBe(123);\n              expect(stdout.trim()).toBe(\n                `child registered signal handlers\\nchild received signal: ${signal}\\nchild exiting`\n              );\n            }\n            expect(stderr).toBe('');\n          });\n        }\n      });\n    });\n  });\n\n  test.suite('node >= 12.x.x', (test) => {\n    test.runIf(semver.gte(process.version, '12.0.0'));\n    test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is *not* enabled and node version is >= 12', async () => {\n      // Node versions >= 12 support package.json \"type\" field and so will throw an error when attempting to load ESM as CJS\n      const { err, stderr } = await exec(`${BIN_PATH} ./index.js`, {\n        cwd: join(TEST_DIR, './esm-err-require-esm'),\n      });\n      expect(err).not.toBe(null);\n      expect(stderr).toMatch(\n        'Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:'\n      );\n    });\n  });\n  test.suite('node < 12.x.x', (test) => {\n    test.runIf(semver.lt(process.version, '12.0.0'));\n    test('Loads as CommonJS when attempting to require() an ESM script when ESM loader is *not* enabled and node version is < 12', async () => {\n      // Node versions less than 12 do not support package.json \"type\" field and so will load ESM as CommonJS\n      const { err, stdout } = await exec(`${BIN_PATH} ./index.js`, {\n        cwd: join(TEST_DIR, './esm-err-require-esm'),\n      });\n      expect(err).toBe(null);\n      expect(stdout).toMatch('CommonJS');\n    });\n  });\n});\n\ntest.suite(\"Catch unexpected changes to node's loader context\", (test) => {\n  // loader context includes import assertions, therefore this test requires support for import assertions\n  test.runIf(nodeSupportsImportAssertions);\n\n  /*\n   * This does not test ts-node.\n   * Rather, it is meant to alert us to potentially breaking changes in node's\n   * loader API.  If node starts returning more or less properties on `context`\n   * objects, we want to know, because it may indicate that our loader code\n   * should be updated to accomodate the new properties, either by proxying them,\n   * modifying them, or suppressing them.\n   */\n  test('Ensure context passed to loader by node has only expected properties', async (t) => {\n    const { stdout, stderr } = await exec(\n      `node --loader ./esm-loader-context/loader.mjs --experimental-json-modules ./esm-loader-context/index.mjs`\n    );\n    const rows = stdout.split('\\n').filter((v) => v[0] === '{');\n    expect(rows.length).toBe(14);\n    rows.forEach((row) => {\n      const json = JSON.parse(row) as {\n        resolveContextKeys?: string[];\n        loadContextKeys?: string;\n      };\n      if (json.resolveContextKeys) {\n        expect(json.resolveContextKeys).toEqual([\n          'conditions',\n          'importAssertions',\n          'parentURL',\n        ]);\n      } else if (json.loadContextKeys) {\n        try {\n          expect(json.loadContextKeys).toEqual(['format', 'importAssertions']);\n        } catch (e) {\n          // HACK for https://github.com/TypeStrong/ts-node/issues/1641\n          if (process.version.includes('nightly')) {\n            expect(json.loadContextKeys).toEqual([\n              'format',\n              'importAssertions',\n              'parentURL',\n            ]);\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        throw new Error('Unexpected stdout in test.');\n      }\n    });\n  });\n});\n"]}