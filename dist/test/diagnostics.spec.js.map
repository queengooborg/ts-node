{"version":3,"file":"diagnostics.spec.js","sourceRoot":"","sources":["../../src/test/diagnostics.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TSError } from '..';\nimport { ctxTsNode, ts } from './helpers';\nimport { context, expect } from './testlib';\nimport * as semver from 'semver';\nimport { once } from 'lodash';\nconst test = context(ctxTsNode);\n\ntest.suite('TSError diagnostics', ({ context }) => {\n  const test = context(\n    once(async (t) => {\n      const service = t.context.tsNodeUnderTest.create({\n        compilerOptions: { target: 'es5' },\n        skipProject: true,\n      });\n      try {\n        service.compile('new Error(123)', 'test.ts');\n      } catch (err) {\n        return { service, err };\n      }\n      return { service, err: undefined };\n    })\n  );\n\n  const diagnosticCode = 2345;\n  const diagnosticMessage = semver.satisfies(ts.version, '2.7')\n    ? \"Argument of type '123' \" +\n      \"is not assignable to parameter of type 'string | undefined'.\"\n    : \"Argument of type 'number' \" +\n      \"is not assignable to parameter of type 'string'.\";\n  const diagnosticErrorMessage = `TS${diagnosticCode}: ${diagnosticMessage}`;\n\n  const cwdBefore = process.cwd();\n  test('should throw errors', ({ log, context: { err, service } }) => {\n    log({\n      version: ts.version,\n      serviceVersion: service.ts.version,\n      cwdBefore,\n      cwd: process.cwd(),\n      configFilePath: service.configFilePath,\n      config: service.config.options,\n    });\n    expect(err).toBeDefined();\n    expect((err as Error).message).toMatch(diagnosticErrorMessage);\n  });\n\n  test('should throw errors with diagnostic text', ({ context: { err } }) => {\n    expect((err as TSError).diagnosticText).toMatch(diagnosticErrorMessage);\n  });\n\n  test('should throw errors with diagnostic codes', ({ context: { err } }) => {\n    expect((err as TSError).diagnosticCodes).toEqual([2345]);\n  });\n\n  test('should throw errors with complete diagnostic information', ({\n    context: { err },\n  }) => {\n    const diagnostics = (err as TSError).diagnostics;\n\n    expect(diagnostics).toHaveLength(1);\n    expect(diagnostics[0]).toMatchObject({\n      code: 2345,\n      start: 10,\n      length: 3,\n      messageText: expect.stringMatching(diagnosticMessage),\n    });\n  });\n});\n"]}