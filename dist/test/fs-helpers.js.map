{"version":3,"file":"fs-helpers.js","sourceRoot":"","sources":["../../src/test/fs-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { TEST_DIR } from './helpers';\nimport * as fs from 'fs';\nimport * as Path from 'path';\n\n// Helpers to describe a bunch of files in a project programmatically,\n// then write them to disk in a temp directory.\n\nexport interface File {\n  path: string;\n  content: string;\n}\nexport interface JsonFile<T> extends File {\n  obj: T;\n}\nexport interface DirectoryApi {\n  add(file: File): File;\n  addFile(...args: Parameters<typeof file>): File;\n  addJsonFile(...args: Parameters<typeof jsonFile>): JsonFile<any>;\n  dir(dirPath: string, cb?: (dir: DirectoryApi) => void): DirectoryApi;\n}\n\nexport type ProjectAPI = ReturnType<typeof projectInternal>;\n\nexport function file(path: string, content = '') {\n  return { path, content };\n}\nexport function jsonFile<T>(path: string, obj: T) {\n  const file: JsonFile<T> = {\n    path,\n    obj,\n    get content() {\n      return JSON.stringify(obj, null, 2);\n    },\n  };\n  return file;\n}\n\nexport function tempdirProject(name = '') {\n  const rootTmpDir = `${TEST_DIR}/tmp/`;\n  fs.mkdirSync(rootTmpDir, { recursive: true });\n  const tmpdir = fs.mkdtempSync(`${TEST_DIR}/tmp/${name}`);\n  return projectInternal(tmpdir);\n}\n\nexport type Project = ReturnType<typeof project>;\nexport function project(name: string) {\n  return projectInternal(`${TEST_DIR}/tmp/${name}`);\n}\n\nfunction projectInternal(cwd: string) {\n  const files: File[] = [];\n  function write() {\n    for (const file of files) {\n      fs.mkdirSync(Path.dirname(file.path), { recursive: true });\n      fs.writeFileSync(file.path, file.content);\n    }\n  }\n  function rm() {\n    try {\n      fs.rmdirSync(cwd, { recursive: true });\n    } catch (err) {\n      if (fs.existsSync(cwd)) throw err;\n    }\n  }\n  const { add, addFile, addJsonFile, dir } = createDirectory(cwd);\n  function createDirectory(\n    dirPath: string,\n    cb?: (dir: DirectoryApi) => void\n  ): DirectoryApi {\n    function add(file: File) {\n      file.path = Path.join(dirPath, file.path);\n      files.push(file);\n      return file;\n    }\n    function addFile(...args: Parameters<typeof file>) {\n      return add(file(...args));\n    }\n    function addJsonFile(...args: Parameters<typeof jsonFile>) {\n      return add(jsonFile(...args)) as JsonFile<unknown>;\n    }\n    function dir(path: string, cb?: (dir: DirectoryApi) => void) {\n      return createDirectory(Path.join(dirPath, path), cb);\n    }\n    const _dir: DirectoryApi = {\n      add,\n      addFile,\n      addJsonFile,\n      dir,\n    };\n    cb?.(_dir);\n    return _dir;\n  }\n  return {\n    cwd,\n    files: [],\n    dir,\n    add,\n    addFile,\n    addJsonFile,\n    write,\n    rm,\n  };\n}\n"]}